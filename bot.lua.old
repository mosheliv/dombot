-- Change these:
local jid, password = "moshehomeautomation@gmail.com", "Stam1stam";
local passcode="x";
local commands = {};


require "verse".init("client");
local http = require "socket.http";
JSON = assert(loadfile "JSON.lua")() -- one-time load of the routines

c = verse.new();
c:add_plugin("version");
c:add_plugin("disco");

function list_device_attr(dev, mode)
	local result = "";
	local exclude_flag;
	
	local exclude_fields = {"Name", "Data", "idx", "SignalLevel", "CustomImage", "Favorite", "HardwareID", "HardwareName", "HaveDimmer", "HaveGroupCmd", "HaveTimeout", "Image", "IsSubDevice", "Notifications", "PlanID", "Protected", "ShowNotifications", "StrParam1", "StrParam2", "SubType", "SwitchType", "SwitchTypeVal", "Timers", "TypeImg", "Unit", "Used", "UsedByCamera", "XOffset", "YOffset"};

	print("=====> in list_device_attr");
	result = "<"..dev.Name..">, Data: "..dev.Data..", Idx: ".. dev.idx;

	if mode == "full" then
		for k,v in pairs(dev) do
			exclude_flag = 0;
			for i, k1 in ipairs(exclude_fields) do
				if k1 == k then
					print("===> excluding "..k);
					exclude_flag = 1;
					break;
				end
			end
			if exclude_flag == 0 then
				print("====> no excluded! "..k);
				result = result..k.."="..tostring(v)..", ";
			else
				exclude_flag = 0;
			end
		end
	end
	return result;
end



function list_handler(parsed_cli)
	local response = "", jresponse, decoded_response, status;

	local match_type, mode;
	local i;

	if parsed_cli[2] == "dump" then
		mode = "full";
	else
		mode = "brief";
	end
	if parsed_cli[3] then
		match_type = string.lower(parsed_cli[3]);
	else
		match_type = "";
	end

	print("in devices_handler!");
	jresponse, status = http.request("http://localhost:8080/json.htm?type=devices")
	print("raw jason", jresponse)
	decoded_response = JSON:decode(jresponse)
	for k,record in pairs(decoded_response) do
		print(k, type(record))
		if type(record) == "table" then
			for k1, v1 in pairs(record) do
				if string.find(string.lower(v1.Type), match_type) then
					print("====> matched", v1.Name);
					response = response..list_device_attr(v1, mode).."\n";
				end
				print(k1, v1)
			end
		else
			print(record)
		end
	end
	return status, response;
end

function help_handler(parsed_cli)
	local response = "";

	for k, r in pairs(commands) do 
		if r.description then
			print(k, r.description);
			response = response..string.format("<%s>:%s\n",k, r.description);
		end
	end
	print ("help response", response)
	return 1, response;
end

commands = {
			["help"] = {handler=help_handler, description=nil},
			["list"] = {handler=list_handler, description="List devices, either all or specific type or specific id"}
		};

-- Add some hooks for debugging
c:hook("opened", function () print("Stream opened!") end);
c:hook("closed", function () print("Stream closed!") end);
c:hook("stanza", function (stanza) 
	local body = stanza:get_child("body");
	print("Stanza:", stanza) 
end);

-- This one prints all received data
c:hook("incoming-raw", print, 1000);

-- Print a message after authentication
c:hook("authentication-success", function () print("Logged in!"); end);
c:hook("authentication-failure", function (err) print("Failed to log in! Error: "..tostring(err.condition)); end);

-- Print a message and exit when disconnected
c:hook("disconnected", function () print("Disconnected!"); os.exit(); end);

-- Now, actually start the connection:
c:connect_client(jid, password);

-- Catch the "ready" event to know when the stream is ready to use
c:hook("ready", function ()
	print("Stream ready!");
	c.version:set{ name = "verse example client" };
	c:send(verse.presence():add_child(c:caps()));
	c:query_version(c.jid, function (v) print("I am using "..(v.name or "<unknown>")); end);
-- Hook the messages once stream is ready 
        c:hook("message", function (message)
                local body = message:get_child_text("body");
		local command_dispatch, status;
                if not body or message.attr.type == "error" then
                        return;
                end

		local parsed_command = {}
		for w in string.gfind(body, "(%a+)") do
			table.insert(parsed_command, w)
		end
		if passcode == nil  or parsed_command[1] == passcode then
			c:send(verse.message({type = "chat", to = message.attr.from}, "Hello, master! got command <"..parsed_command[2]..">"));
			command_dispatch = commands[parsed_command[2]];
			print(command_dispatch);
			if command_dispatch then
				status, text = command_dispatch.handler(parsed_command);
			else
				text = "command <"..parsed_command[2].."> not cound, master";
			end
			c:send(verse.message({type = "chat", to = message.attr.from}, text));

				
		end
        end);
end);

print("Starting loop...")
verse.loop()
